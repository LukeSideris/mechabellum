@use "sass:math";
.container {
  position: relative;
  height: 100%;
  width: 100%;
}

.levelUp {
  position: absolute;
  bottom: 0;
  right: 0;
  display: flex;
  align-items: center;
  justify-content: start;
  padding: 1em 0.6em;
  // update this when adding a new unit or changing grid layout
  width: percentage(math.div(4, 8));
  height: percentage(math.div(1, 4));
}

.levelAllButton {
  height: 100%;
  max-height: 80px;
  // temp when it only fits in one grid slot
  padding: 0.6em 1.0em;
  font-size: 0.8em;
}

.unitSelector {
  display: grid;
  height: 100%;
  width: 100%;
  // TODO: Add container queries to adjust number of cols based on size?
  grid-template-columns: repeat(8, 1fr);
  grid-template-rows: repeat(4, 1fr);
  grid-gap: 3px;
}

.unit {
  background-color: var(--background-L1);
  border: 2px solid var(--border-interactive-off);
  border-radius: var(--radius-sm);
  position: relative;
  text-align: center;
  min-width: 60px;
  min-height: 80px;

  &[data-hovered] {
    border-color: var(--border-interactive-off-hover);
    color: white;
  }
}

.unitCardSizer {
  min-width: 60px;
  position: relative;
}

.unitSelector::after {
  content: "";
  flex-grow: 99;
  height: 0;
}

.hasSelection .unitImage {
  filter: saturate(0.7) contrast(0.7);
}

.unit[data-selected] {
  border-color: var(--border-interactive-on);
  box-shadow: var(--interactive-on-glow);

  &[data-hovered] {
    border-color: var(--border-interactive-on-hover);
    box-shadow: var(--interactive-on-glow-hover);
  }

  .unitImage {
    filter: saturate(1.2) contrast(1.3);
  }
}

.unitImage {
  position: absolute;
  left: 0;
  top: 0;
  right: 0;
  bottom: 0;
  background-size: cover;
  background-repeat: no-repeat;
  background-position: center 25%;
}

:global(.combat-left-side) .unitImage {
  transform: scaleX(-1);
}

.unitName {
  background: rgba(0, 0, 0, 0.7);
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1em;
  letter-spacing: -0.2px;
  position: absolute;
  padding: 2px 0px;
  text-align: center;
  bottom: 0;
  left: 0;
  right: 0;
  text-shadow: 1px 2px 1px #000;

  span {
    // text is allowed to flow onto two lines if required
    line-height: 1.2em;
    min-height: 1lh;
    max-height: 2lh;
    overflow: hidden;
    text-overflow: ellipsis;
  }
}

.levelIcon {
  flex-shrink: 0;
  width: 20px;
  height: 20px;
  filter: drop-shadow(1px 1px 1px #000) drop-shadow(0px 0px 4px #000);

  position: absolute;
  top: 1px;
  left: 2px;
}

.levelAllButton > .levelIcon {
  margin: 0 8px 0 0;
}

.modThumbnails {
  position: absolute;
  left: 0;
  top: 0;
  transform: translateY(-100%);
  z-index: 1;
}

.unitMod {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 2px;
  background: var(--background-L1);
  width: 24px;
  height: 24px;

  img {
    max-height: 100%;
    max-width: 100%;
  }
}

.modEffect {
  position: absolute;
  top: 0;
  right: 0;
  cursor: default;
}

.modEffectContent {
  background: rgba(0, 0, 0, 0.8);
  border-bottom-left-radius: var(--radius-md);
  font-size: 0.875em;
  font-weight: 700;
  line-height: 14px;
  height: 24px;
  min-width: 24px;
  padding: 4px;
  text-align: center;
}

.positiveEffect {
  color: var(--positive-change);
}

.negativeEffect {
  color: var(--negative-change);
}